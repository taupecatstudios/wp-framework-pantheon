#!/usr/bin/env php
<?php

namespace Taupecat_Studios\Configure;

// Pull in the third-part (AWS, GitHub) SDKs.
require '/Users/taupecat/.composer/vendor/autoload.php';
use \Aws\S3\S3Client;
use \Aws\Exception\AwsException;

// Establish the current directory as a constant.
define( 'WORKING_DIR', __DIR__ . '/' );

// Import project variables.
require WORKING_DIR . 'variables.php';

// Import helper functions.
require WORKING_DIR . 'lib/functions.php';

echo 'Clone the _s fork from Taupecat Studios\' GitHub account, and recursively remove the .git and .github directories.' . "\n";

$src         = WORKING_DIR . '../src';
$underscores = 'https://github.com/taupecatstudios/_s.git';

if ( ! file_exists( $src ) ) {

	\Cz\Git\GitRepository::cloneRepository( $underscores, $src );

	removeDirectory( $src . '/.git' );
	removeDirectory( $src . '/.github' );
}

echo 'Pull down the AWS-hosted stuff.' . "\n";
$s3 = [
	'client_info' => new \Aws\S3\S3Client([
		'profile' => 'taupecatstudios',
		'version' => 'latest',
		'region'  => 'us-east-1',
	]),
	'files'       => [
		'taupecat.pem'       => WORKING_DIR . 'taupecat.pem',
		'taupecat.key'       => WORKING_DIR . 'taupecat.key',
		'.env'               => WORKING_DIR . '../.env',
		'auth.json'          => WORKING_DIR . '../auth.json',
		'prepare-commit-msg' => WORKING_DIR . '../.git/hooks/prepare-commit-msg',
	],
];

copyFromS3( $s3 );

echo 'Go through the files that have variables that need replacing and, well, replace them.' . "\n";
$strings = [
	[ WORKING_DIR . 'https.bash'                 => [ '##URL##', $url ] ],
	[ WORKING_DIR . 'https.conf'                 => [ '##URL##', $url ] ],
	[ WORKING_DIR . 'default.conf'               => [ '##URL##', $url ] ],
	[ WORKING_DIR . 'provision.sh'               => [ '##DB_NAME##', $db_name ] ],
	[ WORKING_DIR . '../Vagrantfile'             => [ '##URL##', $url ] ],
	[ WORKING_DIR . '../Vagrantfile'             => [ '##HOSTNAME##', $hostname ] ],
	[ WORKING_DIR . '../gulpfile.babel.js'       => [ '##PROJECT##', $project ] ],
	[ WORKING_DIR . '../package.json'            => [ '##PROJECT##', $project ] ],
	[ WORKING_DIR . '../package.json'            => [ '##DESCRIPTION##', $description ] ],
	[ WORKING_DIR . '../composer.json'           => [ '##PROJECT##', $project ] ],
	[ WORKING_DIR . '../composer.json'           => [ '##DESCRIPTION##', $description ] ],
	[ WORKING_DIR . '../composer.json'           => [ '##HOSTNAME##', $hostname ] ],
	[ WORKING_DIR . '../src/wp-config-local.php' => [ '##TABLE_PREFIX##', $table_prefix ] ],
	[ WORKING_DIR . '../src/wp-config-local.php' => [ '##URL##', $url ] ],
	[ WORKING_DIR . '../src/wp-config-local.php' => [ '##DB_NAME##', $db_name ] ],
	[ WORKING_DIR . '../src/wp-config.php'       => [ '##PRODUCTION_DOMAIN##', $production_domain ] ],
	[ WORKING_DIR . '../src/wp-config.php'       => [ '##TABLE_PREFIX##', $table_prefix ] ],
	[ WORKING_DIR . '../src/wp-config.php'       => [ '##PROJECT##', $project ] ],
	[ WORKING_DIR . '../src/mu-plugin.php'       => [ '##PROJECT##', $project ] ],
	[ WORKING_DIR . '../src/mu-plugin.php'       => [ '##PROJECT_NAME##', $project_name ] ],
	[ WORKING_DIR . '../auth.json'               => [ '##WPMDBPRO_USERNAME##', $wpmdbpro_username ] ],
	[ WORKING_DIR . '../auth.json'               => [ '##WPMDBPRO_PASSWORD##', $wpmdbpro_password ] ],
];

findAndReplace( $strings );

echo 'Once again, but for Underscores.' . "\n";
$strings_underscores = [
	[ '\'_s\'', $text_domain ],
	[ '_s_', $function_names ],
	[ 'Text Domain: _s', $css ],
	[ ' _s', '$docblocks' ],
	[ '_s-', $prefixed_handles ],
];

findAndReplaceUnderscores( WORKING_DIR . '../src', $strings_underscores );

echo 'Rename the plugin loader file.' . "\n";
rename( WORKING_DIR . '../src/plugin/wp-framework.php', WORKING_DIR . '../src/plugin/' . $project . '.php' );
